- question: 删除字典中的值
  answer: |-
    my_dict = dict(name="lowman", age=45, money=998, hourse=None)
    key_list = my_dict.keys()
    print(list(key_list))
- question: 字典合并
  answer: a.updates(b)
- question: Python2 和python3 range的区别
  answer: python 2 返回list， python 3 返回生成器
- question: python 3 class 里面的 __new__ 和 __init__ 有什么区别
  answer:
    - __new__至少要有一个参数cls，代表当前类，此参数在实例化时由Python解释器自动识别
    - __new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类（通过super(当前类名, cls)）__new__出来的实例，或者直接是object的__new__出来的实例
    - __init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值, 如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。
- question: sort() 和 sorted() 的区别
  answer:
- question: 字符串变成小写
  answer: s.lower()
- question: list 切片是深拷贝还是浅拷贝
  answer: 浅拷贝
- question: 遍历列表的过程中删除元素
  answer: 1) 切片 2) 列表推导 3) 倒序删除
- question: is 和 == 的区别
  answer: is 比较两个对象的id是否相等，即是否是同一块内存地址；==比较两个队形的内容/值是否相等，默认调用对象的__eq__方法
- question: Python 对象的作用域
  answer: LEGB, L-local, E-enclosing, G-global, B-buildin
- question: numpy ndarray 和 pandas dataframe哪个更高效，为什么？
  answer: ndarray, 数据是同质的
- question: python 中类方法，实例方法，静态方法有什么区别
  answer: >-
    类方法: 是类对象的方法，在定义时需要在上方使用 @classmethod 进行装饰,形参为cls，表示类对象，类对象和实例对象都可调用
    类实例方法: 是类实例化对象的方法,只有实例对象可以调用，形参为self,指代对象本身;
    静态方法: 是一个任意函数，在其上方使用 @staticmethod 进行装饰，可以用对象直接调用，静态方法实际上跟该类没有太大关系
- question: 函数调用参数的传递方式是值传递还是引用传递
  answer: 传对象，不可变对象传值，可变对象传引用
- question: python 中的数据类型有哪些，哪些是可变的，哪些是不可变的？
  answer: >-
    不可变：Numberic(int, float), String, Tuple
    可变：Set, List, Dict
- question: 单个指针删除链表倒数第k个节点？
  answer: 双指针
- question: Python 魔法方法有哪些
  answer:
    - __init__ 构造器，当一个实例被创建的时候初始化的方法，但是它并不是实例化调用的第一个方法
    - __new__ 才是实例化对象调用的第一个方法，它只取下cls参数，并把其他参数传给 __init___
    - __call__ 让一个类的实例像函数一样被调用
    - __getitem__ 定义获取容器中指定元素的行为，相当于self[key]
    - __getattr__ 定义当用户试图访问一个不存在属性的时候的行为
    - __setattr__ 定义当一个属性被设置的时候的行为
    - __getattribute__ 定义当一个属性被访问的时候的行为
- question: python 线程中设置 setDaemon(True) 表示什么
  answer: 设置子线程为守护线程，主线程一单结束运行，子线程被强制结束
- question: python 多进程和多线程的使用场景
  answer:
    - 多进程适合CPU密集型任务
    - 多线程适合IO密集型任务
- question: 回调函数是如何通信的
  answer: 回调函数是把函数的指针(地址)作为参数传递给另一个函数，将整个函数当作一个对象，赋值给调用的函数。
- question: hasattr() getattr() setattr() 函数使用详解
  answer:
    - hasattr(object,name) 判断一个对象里面是否有name属性或者name方法，返回bool值，有name属性（方法）返回True，否则返回False。
    - getattr(object, name[,default]) 获取对象object的属性或者方法，如果存在则打印出来，如果不存在，打印默认值，默认值可选。注意：如果返回的是对象的方法，则打印结果是：方法的内存地址，如果需要运行这个方法，可以在后面添加括号()
    - setattr(object, name, values) 给对象的属性赋值，若属性不存在，先创建再赋值
- question: 请按alist中元素的age由大到小排序 alist = [{'name':'a','age':20},{'name':'b','age':30},{'name':'c','age':25}]
  answer: return sorted(alist,key=lambda x:x['age'],reverse=True)


